// -*- C++ -*- generated by wxGlade 0.4.1 on Thu Mar  1 16:31:25 2007

#include "MyStockDialog.h"
#include "app.h"

BEGIN_EVENT_TABLE(MyStockDialog, wxDialog)
	EVT_TEXT_ENTER(-1,OnEnterProcess) 
	EVT_STOCK_VALIDATE_DONE(-1, OnUrlValidDone)
END_EVENT_TABLE()

void MyStockDialog::OnUrlValidDone(wxStockValidateDoneEvent &event){
	if (event.Result.IsEmpty()){
		wxLogMessage(_("%s is not a valid stock id, or network error!"),event.Id);
		return;
	}
	if (validateStocks){
	    StocksDataFetch*stock = wxGetApp().GetCurFetchObj();
		Stock *s = validateStocks->GetStockById(event.Id);
		if (!s){
            Stock*s = new Stock(event.Id,event.Result);
			s->InitHistoryData(stock->GetHistoryDataGroupNum());
            s->LoadHistoryDataFromFile();
            validateStocks->GetList()->Append(s);
			validateStocks->SaveStockIndex();			
		}
		if (t_stockid->GetValue() == event.Id){
			text_stockname->SetValue(event.Result);
		}
	}
}

void MyStockDialog::OnEnterProcess(wxCommandEvent &event){
	if (validateStocks){
		Stock *s = validateStocks->GetStockById(t_stockid->GetValue());
		if (s){
			text_stockname->SetValue(s->GetName());
		}
	}
}

bool wxStockIdValidator::Validate(wxWindow * parent){
    wxTextCtrl *control = (wxTextCtrl *) m_validatorWindow;
    // If window is disabled, simply return
    if ( !control->IsEnabled() )
        return true;
    wxString val(control->GetValue());
	if (val.IsEmpty()){
		wxLogMessage(_("The StockId should not be empty!"));
		return false;
	}

	Stocks* ss = ((MyStockDialog*)parent)->GetValidateStocks();
	if (!ss) return true;

	Stock*s = ss->GetStockById(val);
	if (!s){
		if (wxMessageBox(wxString::Format(
			_("%s is not predefined stockid,would you like to check it now?"),val.c_str()),
			_("Validate needed"),wxCANCEL | wxOK ) == wxOK){
			StocksDataFetch* sfetch= wxGetApp().GetCurFetchObj();
			if (sfetch){
				sfetch->ValidateStockId(parent,val);
				return false;
			}
		}
	}

	return true;
}

MyStockDialog::MyStockDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME)
{
    // begin wxGlade: MyStockDialog::MyStockDialog
    label_1 = new wxStaticText(this, -1, _("Stock Id:"));
    t_stockid = new wxTextCtrl(this, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
    label_13 = new wxStaticText(this, -1, _("Stock Name:"));
    text_stockname = new wxTextCtrl(this, -1, wxT(""));
    label_2 = new wxStaticText(this, -1, _("Acount:"));
    t_acount = new wxTextCtrl(this, -1, wxT(""));
    label_3 = new wxStaticText(this, -1, _("Price:"));
    t_price = new wxTextCtrl(this, -1, wxT(""));
    label_9 = new wxStaticText(this, -1, _("Operate:"));
    const wxString c_op_choices[] = {
        _("Buy"),
        _("Sell")
    };
    c_op = new wxComboBox(this, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 2, c_op_choices, wxCB_DROPDOWN|wxCB_READONLY);
    static_line_2 = new wxStaticLine(this, -1);
    button_2 = new wxButton(this, wxID_CANCEL, wxT(""));
    button_3 = new wxButton(this, wxID_OK, wxT(""));

    set_properties();
    do_layout();
    // end wxGlade
	SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    t_stockid->SetValidator(wxStockIdValidator(&data.StockId));
    t_acount->SetValidator(wxGenericValidator(&data.ACount));
    t_price->SetValidator(wxDoubleValidator(&data.Price));
    c_op->SetValidator(wxGenericValidator(&data.Op));
	validateStocks = NULL;

}


void MyStockDialog::set_properties()
{
    // begin wxGlade: MyStockDialog::set_properties
    SetTitle(_("MyStock"));
    c_op->SetSelection(-1);
    button_3->SetDefault();
    // end wxGlade
	text_stockname->Enable(false);
}


void MyStockDialog::do_layout()
{
    // begin wxGlade: MyStockDialog::do_layout
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    wxFlexGridSizer* grid_sizer_1 = new wxFlexGridSizer(5, 2, 0, 0);
    grid_sizer_1->Add(label_1, 0, wxRIGHT|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 5);
    grid_sizer_1->Add(t_stockid, 0, wxEXPAND|wxADJUST_MINSIZE, 0);
    grid_sizer_1->Add(label_13, 0, wxRIGHT|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 5);
    grid_sizer_1->Add(text_stockname, 0, wxEXPAND|wxADJUST_MINSIZE, 0);
    grid_sizer_1->Add(label_2, 0, wxRIGHT|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 5);
    grid_sizer_1->Add(t_acount, 0, wxEXPAND|wxADJUST_MINSIZE, 0);
    grid_sizer_1->Add(label_3, 0, wxRIGHT|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 5);
    grid_sizer_1->Add(t_price, 0, wxEXPAND|wxADJUST_MINSIZE, 0);
    grid_sizer_1->Add(label_9, 0, wxRIGHT|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 5);
    grid_sizer_1->Add(c_op, 0, wxEXPAND|wxADJUST_MINSIZE, 0);
    grid_sizer_1->AddGrowableCol(1);
    sizer_4->Add(grid_sizer_1, 1, wxALL|wxEXPAND, 5);
    sizer_4->Add(static_line_2, 0, wxEXPAND, 0);
    sizer_5->Add(20, 20, 1, wxADJUST_MINSIZE, 0);
    sizer_5->Add(button_2, 0, wxALL|wxADJUST_MINSIZE, 5);
    sizer_5->Add(button_3, 0, wxALL|wxADJUST_MINSIZE, 5);
    sizer_4->Add(sizer_5, 0, wxEXPAND, 0);
    SetAutoLayout(true);
    SetSizer(sizer_4);
    sizer_4->Fit(this);
    sizer_4->SetSizeHints(this);
    Layout();
    // end wxGlade
}

